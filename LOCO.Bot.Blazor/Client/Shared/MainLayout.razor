@inject NavigationManager NavigationManager
@inject ISessionStorageService SessionStorage
@inject LOCOAuthenticationStateProvider AuthProvider
@inherits LayoutComponentBase

<MudDialogProvider />
<MudSnackbarProvider />
<MudThemeProvider Theme="currentTheme"/>

<MudLayout>
    <MudAppBar Elevation="2">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5">@AppDefaults.AppName</MudText>

        <AuthorizeView>
            <Authorized>
                <MudGrid>
                    <MudItem xs="12">
                        <MudGrid Spacing="5" Justify="Justify.FlexEnd">
                            <MudItem>
                                <MudAvatar Image="@loggedUser?.AvatarUrl"/>
                            </MudItem>
                            <MudItem>
                                <MudText Typo="Typo.h6">Hello, @loggedUser?.Name!</MudText>
                            </MudItem>
                            <MudItem>
                                <MudLink Typo="Typo.h6" Color="Color.Inherit" Href="@ApiAuthDefaults.LogOutPath">Log out</MudLink>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudGrid>
            </Authorized>
            <NotAuthorized>
                <MudGrid>
                    <MudItem xs="12">
                        <MudGrid Spacing="5" Justify="Justify.FlexEnd">
                            <MudItem>
                                <MudLink Typo="Typo.h6" Class="ml-3" Href="@ApiAuthDefaults.LogInPath" @onclick="LogInClicked">Log in</MudLink>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudGrid>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu>
            <MudNavGroup Title="Wheel" Expanded="true">
                <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Filled.Accessible">Home</MudNavLink>
                <MudNavLink Href="/wheeledit" Match="NavLinkMatch.All" Icon="@Icons.Filled.Settings">Configuration</MudNavLink>
            </MudNavGroup>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.Large">
             <AuthorizeView Context="general">
                <Authorized>
                    <AuthorizeView Policy=@ApiAuthDefaults.PolicyName>
                         <Authorized>
                             @Body
                         </Authorized>

                          <NotAuthorized>
                              Sorry you don't have the neccassry rights!
                         </NotAuthorized>
                    </AuthorizeView>
                </Authorized>
                 <NotAuthorized>
                     Please login!
                 </NotAuthorized>
             </AuthorizeView>
         </MudContainer>
    </MudMainContent>
</MudLayout>

@code
{
    private bool _drawerOpen = true;

    private MudTheme currentTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Black = "#27272f",
            Background = "#32333d",
            BackgroundGrey = "#27272f",
            Surface = "#373740",
            DrawerBackground = "#27272f",
            DrawerText = "rgba(255,255,255, 0.50)",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#27272f",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "rgba(255,255,255, 0.70)",
            TextSecondary = "rgba(255,255,255, 0.50)",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)"
        }
    };

    void DrawerToggle() 
        => _drawerOpen = !_drawerOpen;

    public IDCUser loggedUser { get; set; }

    protected async override Task OnInitializedAsync()
    {
        loggedUser = await AuthProvider.GetCurrentUser();

        var loc = await SessionStorage.GetItemAsync<Uri>(SessionStoreDefaults.Nav);

        if(loc is not null)
        {
            NavigationManager.NavigateTo(loc.LocalPath);
            await SessionStorage.RemoveItemAsync(SessionStoreDefaults.Nav);
        }
    }

    private void LogInClicked(MouseEventArgs args)
    {
        SessionStorage.SetItemAsync<Uri>(SessionStoreDefaults.Nav, new Uri(NavigationManager.Uri));
    }
}
