@page "/wheeledit"
@using MudBlazor.Utilities

@inject IAuthorizedClientFactory httpClientFactory
@inject ISnackbar Snackbar

<MudTable Items="@WheelEntries" Hover="true" CanCancelEdit="true" @bind-SelectedItem="selectedItem" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Wheel Segment saved!"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Wheel Segments</MudText>
    </ToolBarContent>
    <ColGroup>
        <col style="width:200px;" />
        <col style="width:50%;" />
        <col style="width:100px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<WheelEntry, object>(x => x.Color)">Color</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<WheelEntry, object>(x => x.Text)">Text</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WheelEntry, object>(x => x.Qty)">Qty</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Color</MudTd>
        <MudTd DataLabel="Sign">@context.Text</MudTd>
        <MudTd DataLabel="Name">@context.Qty</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Color">
            <MudColorPicker Style="@($"color: {@context.Color};")" ColorPickerView="ColorPickerView.Spectrum" @bind-Text="@context.Color" @bind-Value="@selectedColor" ColorPickerMode="ColorPickerMode.HEX" DisableToolbar="true" DisableAlpha="true" DisableInputs="true" />
        </MudTd>
        <MudTd DataLabel="Text">
            <MudTextField @bind-Value="@context.Text" Required />
        </MudTd>
        <MudTd DataLabel="Qty">
            <MudNumericField @bind-Value="@context.Qty" Required Min="0" />
        </MudTd>
    </RowEditingTemplate>
    <RowTemplate>
        <MudTd DataLabel="Color" Style="@($"color: {@context.Color};")">
            @context.Color
        </MudTd>
        <MudTd DataLabel="Text">
            @context.Text
        </MudTd>
        <MudTd DataLabel="Qty">
            @context.Qty
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@*<MudText Inline="true">Selected: @selectedItem.Text</MudText>
<div class="d-flex">
    <MudSpacer />
    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="AddNew">New</MudButton>
</div>*@

@code {
    private MudColor selectedColor;

    private List<string> editEvents = new();

    private WheelEntry selectedItem = null;
    private WheelEntry elementBeforeEdit;
    private HashSet<WheelEntry> selectedItems1 = new HashSet<WheelEntry>();

    private ICollection<WheelEntry> WheelEntries = new List<WheelEntry>();

    protected override async Task OnInitializedAsync() =>  await LoadEntries();

    private async Task LoadEntries()
    {
        var httpClient = httpClientFactory.CreateClient();
        WheelEntries = await httpClient.GetFromJsonAsync<WheelEntry[]>("api/wheel");
    }

    private void BackupItem(object item)
    {
        if (item is WheelEntry wheelEntry)
        {
            selectedColor = new MudColor(wheelEntry.Color);

            elementBeforeEdit = new()
            {
                Id = wheelEntry.Id,
                Color = wheelEntry.Color,
                Text = wheelEntry.Text,
                Qty = wheelEntry.Qty
            };
        }
    }

    private void AddNew()
    {
        var we = new WheelEntry();
        WheelEntries.Add(we);
        selectedItem = we;
    }

    private async void ItemHasBeenCommitted(object item)
    {
        if (item is WheelEntry wheelEntry)
        {
            var httpClient = httpClientFactory.CreateClient();
            await httpClient.PostAsJsonAsync<WheelEntry>("api/wheel", wheelEntry);

            await LoadEntries();
        }
    }

    private void ResetItemToOriginalValues(object item)
    {
         if (item is WheelEntry wheelEntry)
         {
            wheelEntry.Id = elementBeforeEdit.Id;
            wheelEntry.Color = elementBeforeEdit.Color;
            wheelEntry.Text = elementBeforeEdit.Text;
            wheelEntry.Qty = elementBeforeEdit.Qty;

            if (elementBeforeEdit.Id == 0)
                WheelEntries.Remove(wheelEntry);
         }
    }
}
