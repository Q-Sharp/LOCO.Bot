@inject IJSRuntime _jSRuntime
@inject IWheelService _wheelService

@if (WheelEntries != null)
{
    <div id="venues" style="float:left; visibility:collapse">
        <ul>
            @foreach (var we in WheelEntries)
            {
                <li>
                    <input id=@($"venue-{we.Guid}") name=@(we.Text) value=@(we.Text) type="checkbox" checked="checked" style=@($"background-color:{we.Color}")>
                    <label for=@($"venue-{we.Guid}")>@(we.Text)</label>
                </li>
            }
        </ul>
    </div>

    <div id="wheel">
        <canvas height="600" id="canvas" width="1000"></canvas>
    </div>

    <div id="stats">
        <div id="counter">
        </div>
    </div>
}

@code {
    public WheelEntry[] WheelEntries { get; set; }

    protected async override Task OnInitializedAsync()
    {
        WheelEntries = (await _wheelService.GetWheelEntriesShuffledAsync()).ToArray();
        await base.OnInitializedAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(WheelEntries != null && WheelEntries.Length > 0)
            await _jSRuntime.InvokeVoidAsync("initWheel");
        await base.OnAfterRenderAsync(firstRender);
    }
}
