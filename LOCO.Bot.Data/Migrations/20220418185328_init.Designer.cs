// <auto-generated />
using System;
using LOCO.Bot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LOCO.Bot.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220418185328_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LOCO.Bot.Shared.Data.Entities.Guess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("GuessAmount")
                        .HasColumnType("double precision");

                    b.Property<decimal>("MemberId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("MemberName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("Guess");
                });

            modelBuilder.Entity("LOCO.Bot.Shared.Data.Entities.Restart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Channel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("Guild")
                        .HasColumnType("numeric(20,0)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("Restart");
                });

            modelBuilder.Entity("LOCO.Bot.Shared.Data.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("GuessChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuessMemberRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("GuessingsPossible")
                        .HasColumnType("boolean");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("LOCO.Bot.Shared.Data.Entities.WheelEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("WheelEntry");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#8B0000",
                            Qty = 5,
                            Text = "1k RLB"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#FF4500",
                            Qty = 3,
                            Text = "5K RLB"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#008000",
                            Qty = 2,
                            Text = "20$ bonus buy"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#ADFF2F",
                            Qty = 1,
                            Text = "40$ bonus buy"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#FFD700",
                            Qty = 1,
                            Text = "100$ bonus buy"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
